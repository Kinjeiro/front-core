const fs=require("fs"),path=require("path"),rmdir=require("rimraf"),tmp=require("tmp"),{Readable}=require("stream"),os=require("os"),mime=require("mime");function ensureDirectoryExistence(a){const b=path.dirname(a);return!!fs.existsSync(b)||(ensureDirectoryExistence(b),fs.mkdirSync(b),!1)}function removeFile(a){rmdir.sync(a)}function removeDir(a){removeFile(a)}function createDir(a,b=!1){const c=path.join(a,"test.file"),d=ensureDirectoryExistence(c);return d&&b?(removeDir(a),ensureDirectoryExistence(c),!0):d}function getTmpDirectory(){return os.tmpdir()}async function createTempFile(a=null,b=null,c=void 0){return new Promise((d,e)=>{tmp.file(Object.apply({keep:!0},c),(c,f,g)=>{c?e(c):writeToFilePromise(f,a,null,b,g).then(d,e)})})}function readFile(a,b={}){b.encoding=b.encoding||"UTF-8";const c=fs.readFileSync(a,b);return c.replace(/^\uFEFF/,"")}function writeToFile(a,b){ensureDirectoryExistence(a),fs.writeFileSync(a,"object"==typeof b?JSON.stringify(b,null,2):b,"utf8")}async function writeToFilePromise(a,b,c=null,d=null,e=null){return new Promise((f,g)=>{try{ensureDirectoryExistence(a);const{append:h=!0}=c||{};if(d){e&&fs.close(e);const b=path.join(path.dirname(a),d);fs.renameSync(a,b),console.log(`Rename file\n-- from: ${a}\n--   to: ${b}`),a=b}if(null!==b){const d=fs.createWriteStream(a,Object.apply({flags:h?"a":"w"},c)).on("finish",()=>f(a)).on("error",g);b instanceof Readable?b.pipe(d):d.write(b),d.end()}else f(a)}catch(a){g(a)}})}function getAbsolutePath(a){return path.resolve(a)}function getCurrentDir(){return path.dirname(require.main.filename)}function getProjectDir(){return process.cwd()}function inProject(a){return path.resolve(getProjectDir(),a)}function getMimeType(a){return mime.getType(a)}function getExtension(a){return mime.getExtension(a)}module.exports={ensureDirectoryExistence,getTmpDirectory,createTempFile,createDir,readFile,writeToFile,writeToFilePromise,removeFile,removeDir,getAbsolutePath,getCurrentDir,getProjectDir,inProject,getMimeType,getExtension};